// reset.js
import { Client } from "@notionhq/client";
const notificationPageId = "2916d882db6d80408466c2146b15a9dd";
const mainPageId = "2916d882db6d804eaa96e6c338ab1bea";

const MEMBER_USERS = [
  { name: "Khang l·ªõn", id: "291d872b-594c-8197-90f0-0002ee26f5aa" },
  { name: "B·ªùm", id: "292d872b-594c-81c4-8334-00029b03970f" },
  { name: "Lu√¢n", id: "292d872b-594c-810b-a245-00024185a41c" },
  { name: "Huy V≈©", id: "292d872b-594c-810a-a915-00020cc29e5f" },
  { name: "Danh", id: "292d872b-594c-8152-ae38-000244d0abed" },
  { name: "Huyo1", id: "292d872b-594c-8139-954e-0002159195af" },
];

// üîê L·∫•y bi·∫øn m√¥i tr∆∞·ªùng t·ª´ GitHub Secrets
const NOTION_TOKEN = process.env.NOTION_TOKEN;
const DATABASE_ID = process.env.DATABASE_ID;
const listUserDB_ID = "2926d882db6d8030ad27cacffeb6edde";
const notion = new Client({ auth: NOTION_TOKEN });

// üß© Danh s√°ch th√†nh vi√™n c·ªë ƒë·ªãnh
// const MEMBER_OPTIONS = [
//   "Khang l·ªõn",
//   "B·ªùm",
//   "B·∫øu",
//   "Huy V≈©",
//   "H·∫£i",
//   "Lu√¢n",
//   "Danh",
// ];

// üìú Ghi log ra console (kh√¥ng c·∫ßn ghi file trong GitHub Actions)
function writeLog(message) {
  const timestamp = new Date().toLocaleString("vi-VN", {
    timeZone: "Asia/Ho_Chi_Minh",
  });
  console.log(`[${timestamp}] ${message}`);
}
// üß† Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn Notion
async function testConnection() {
  writeLog("üîç Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn Notion Database...");

  if (!NOTION_TOKEN || !DATABASE_ID) {
    writeLog("‚ùå Thi·∫øu NOTION_TOKEN ho·∫∑c DATABASE_ID trong bi·∫øn m√¥i tr∆∞·ªùng");
    return false;
  }

  try {
    const db = await notion.databases.retrieve({
      database_id: DATABASE_ID,
    });
    writeLog(`‚úÖ K·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn database: ${db.title[0].plain_text}`);
    return true;
  } catch (err) {
    writeLog("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn database: " + err.message);
    return false;
  }
}

// üîÑ ƒê·∫£m b·∫£o danh s√°ch option ‚ÄúTh√†nh vi√™n‚Äù c√≥ ƒë·∫ßy ƒë·ªß
async function ensureMemberOptions() {
  try {
    writeLog("üîÑ ƒêang c·∫≠p nh·∫≠t danh s√°ch 'Th√†nh vi√™n' k√®m m√†u...");

    const db = await notion.databases.retrieve({
      database_id: DATABASE_ID,
    });

    // T·∫°o danh s√°ch options c√≥ m√†u
    const newOptions = MEMBER_USERS.map(user => ({
      name: user.name,
      color: user.color || "default", // fallback n·∫øu kh√¥ng c√≥ m√†u
    }));

    // C·∫≠p nh·∫≠t field "Th√†nh vi√™n" v·ªõi options m·ªõi
    await notion.databases.update({
      database_id: DATABASE_ID,
      properties: {
        "Th√†nh vi√™n": {
          multi_select: {
            options: newOptions,
          },
        },
      },
    });

    writeLog("‚úÖ ƒê√£ c·∫≠p nh·∫≠t xong danh s√°ch 'Th√†nh vi√™n' c√≥ m√†u.");
  } catch (err) {
    writeLog("‚ùå L·ªói khi c·∫≠p nh·∫≠t danh s√°ch th√†nh vi√™n: " + err.message);
  }
}

// üßπ Reset d·ªØ li·ªáu c·ªôt ‚ÄúTh√†nh vi√™n‚Äù
async function resetData() {
  writeLog("üïì B·∫Øt ƒë·∫ßu reset d·ªØ li·ªáu...");

  try {
    await ensureMemberOptions();

    const pages = await notion.databases.query({
      database_id: DATABASE_ID,
    });

    for (const page of pages.results) {
      await notion.pages.update({
        page_id: page.id,
        properties: {
          "Th√†nh vi√™n": { multi_select: [] },
        },
      });
      writeLog(`‚úÖ ƒê√£ xo√° 'Th√†nh vi√™n' trong page: ${page.id}`);
    }

    writeLog("üéâ Ho√†n t·∫•t reset c·ªôt 'Th√†nh vi√™n'!");
  } catch (err) {
    writeLog("‚ùå L·ªói khi reset: " + err.message);
  }
}
// üì• 1. H√†m l·∫•y d·ªØ li·ªáu t·ª´ c·ªôt "asd"
async function getFieldData(column) {
  writeLog("üì• ƒêang l·∫•y d·ªØ li·ªáu t·ª´ c·ªôt 'User'...");

  try {
    const pages = await notion.databases.query({
      database_id: listUserDB_ID,
    });

    for (const page of pages.results) {
      const properties = page.properties;
      const asdField = properties[column];
      const peopleList = [];

      if (asdField && asdField.type === "people") {
        asdField.people.forEach((person) => {
          if (person.object === "user") {
            peopleList.push({
              id: person.id,
              name: person.name,
            });
          }
        });

        writeLog(`üë• D·ªØ li·ªáu 'User' trong page ${page.id}:`);
        peopleList.forEach((p) => {
          writeLog(`   - ${p.name} (ID: ${p.id})`);
        });
      } else {
        writeLog(
          `‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu h·ª£p l·ªá trong 'User' cho page ${page.id}`
        );
      }
    }
  } catch (err) {
    writeLog("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu 'User': " + err.message);
  }
}

async function notifyUsers(pageId, headingText) {
  const now = new Date().toLocaleString("vi-VN", {
    timeZone: "Asia/Ho_Chi_Minh",
    hour12: false,
  });

  // L·∫•y t·∫•t c·∫£ block trong page
  const blocks = await getAllBlocks(pageId);

  // T√¨m heading theo n·ªôi dung
  const headingBlock = blocks.find((block) => {
    const type = block.type;
    const richText = block[type]?.rich_text;
    if (!richText || !Array.isArray(richText)) return false;
    const content = richText.map((rt) => rt.plain_text).join("");
    return (
      ["heading_1", "heading_2", "heading_3"].includes(type) &&
      content.trim().toLowerCase() === headingText.trim().toLowerCase()
    );
  });

  if (!headingBlock) {
    writeLog(`‚ùå Kh√¥ng t√¨m th·∫•y heading "${headingText}" trong page.`);
    return;
  }

  const headingId = headingBlock.id;
  writeLog(`‚úÖ T√¨m th·∫•y heading "${headingText}" (ID: ${headingId})`);

  // Xo√° t·∫•t c·∫£ block con c·ªßa heading
  const children = await getAllBlocks(headingId);
  for (const child of children) {
    await notion.blocks.delete({ block_id: child.id });
    writeLog(`üóëÔ∏è ƒê√£ xo√° block con: ${child.id}`);
  }

  // T·∫°o c√°c block m·ªõi ƒë·ªÉ th√¥ng b√°o
  const newBlocks = MEMBER_USERS.map(({ name, id }) => ({
    type: "paragraph",
    paragraph: {
      rich_text: [
        {
          type: "text",
          text: {
            content: `${now}: V√†o vote ƒëi, ${name} `,
          },
        },
        {
          type: "mention",
          mention: {
            type: "user",
            user: { id },
          },
          plain_text: `(@${name})`,
        },
      ],
    },
  }));

  // Th√™m c√°c block con m·ªõi d∆∞·ªõi heading
  await notion.blocks.children.append({
    block_id: headingId,
    children: newBlocks,
  });

  writeLog("‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o m·ªõi");
}

async function getAllBlocks(pageId) {
  let blocks = [];
  let cursor = undefined;

  do {
    const response = await notion.blocks.children.list({
      block_id: pageId,
      start_cursor: cursor,
      page_size: 100,
    });

    blocks.push(...response.results);
    cursor = response.has_more ? response.next_cursor : null;
  } while (cursor);

  return blocks;
}

/**
 * In ra t·∫•t c·∫£ block trong page, k√®m ID, lo·∫°i, v√† n·ªôi dung n·∫øu c√≥
 */
async function logAllBlocks(pageId) {
  try {
    const blocks = await getAllBlocks(pageId);
    console.log(`üìã Trang c√≥ ${blocks.length} block:`);

    blocks.forEach((block, index) => {
      const id = block.id;
      const type = block.type;

      // L·∫•y n·ªôi dung text n·∫øu block c√≥ rich_text ho·∫∑c title
      let content = "[Kh√¥ng c√≥ n·ªôi dung]";
      if (block[type]?.rich_text?.length) {
        content = block[type].rich_text.map((rt) => rt.plain_text).join("");
      } else if (block[type]?.title?.length) {
        content = block[type].title.map((rt) => rt.plain_text).join("");
      }

      console.log(`\nüîπ Block #${index + 1}`);
      console.log(`üÜî ID     : ${id}`);
      console.log(`üì¶ Lo·∫°i   : ${type}`);
      console.log(`üìù N·ªôi dung : ${content}`);
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y block:", err);
  }
}
// H√†m delay gi√∫p "ngh·ªâ" gi·ªØa c√°c thao t√°c API
function delay(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

// H√†m x√≥a block an to√†n c√≥ retry
async function safeDeleteBlock(blockId, retries = 3) {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      await notion.blocks.delete({ block_id: blockId });
      console.log(`üóëÔ∏è ƒê√£ xo√° block con: ${blockId}`);
      return;
    } catch (err) {
      if (err.code === "conflict_error" && attempt < retries) {
        console.warn(
          `‚ö†Ô∏è Xung ƒë·ªôt khi xo√° block ${blockId}, th·ª≠ l·∫°i l·∫ßn ${attempt}...`
        );
        await delay(500); // ch·ªù 0.5s r·ªìi th·ª≠ l·∫°i
      } else {
        console.error(`‚ùå Kh√¥ng th·ªÉ xo√° block ${blockId}:`, err.message);
        break;
      }
    }
  }
}

// H√†m ch√≠nh
async function deleteChildrenOfHeading(pageId, headingText) {
  const blocks = await getAllBlocks(pageId);

  // T√¨m heading
  const headingBlock = blocks.find((block) => {
    const type = block.type;
    const richText = block[type]?.rich_text;
    if (!richText || !Array.isArray(richText)) return false;
    const content = richText.map((rt) => rt.plain_text).join("");
    return (
      ["heading_1", "heading_2", "heading_3"].includes(type) &&
      content.trim().toLowerCase() === headingText.trim().toLowerCase()
    );
  });

  if (!headingBlock) {
    console.log(`‚ùå Kh√¥ng t√¨m th·∫•y heading v·ªõi n·ªôi dung: "${headingText}"`);
    return;
  }

  console.log(`‚úÖ T√¨m th·∫•y heading "${headingText}" (id: ${headingBlock.id})`);

  // L·∫•y c√°c block con
  const children = await getAllBlocks(headingBlock.id);

  if (children.length === 0) {
    console.log("‚ÑπÔ∏è Heading kh√¥ng c√≥ block con.");
    return;
  }

  console.log(`üßπ ƒêang xo√° ${children.length} block con:`);

  // Xo√° l·∫ßn l∆∞·ª£t t·ª´ng block con m·ªôt c√°ch an to√†n
  for (const child of children) {
    await safeDeleteBlock(child.id);
    await delay(300); // ngh·ªâ gi·ªØa m·ªói l·∫ßn xo√°
  }

  console.log(`‚úÖ ƒê√£ xo√° xong to√†n b·ªô con c·ªßa heading "${headingText}"`);
}

// üöÄ Ch·∫°y ch∆∞∆°ng tr√¨nh ch√≠nh ngay khi workflow ch·∫°y
(async () => {
  const connected = await testConnection();
  if (!connected) {
    writeLog("‚ö†Ô∏è D·ª´ng ch∆∞∆°ng tr√¨nh v√¨ kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c v·ªõi Notion.");
    process.exit(1);
  }
  await getFieldData("User"); //L·∫•y id user
  await resetData(); //Reset data
  // await logAllBlocks(mainPageId); //L·∫•y c√°c block trong page
  // await deleteChildrenOfHeading(mainPageId,"Th√¥ng b√°o:"); //X√≥a th√¥ng b√°o c≈©
  // await notifyUsers(mainPageId,"Th√¥ng b√°o:"); //Th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ th√†nh vi√™n
})();
