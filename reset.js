// reset.js
import { Client } from "@notionhq/client";
const notificationPageId = "2916d882db6d80408466c2146b15a9dd";
const MEMBER_USERS = [
  { name: "Khang", id: "2916d882-db6d-804d-a8e2-ca447c7e30d1" },
];

// üîê L·∫•y bi·∫øn m√¥i tr∆∞·ªùng t·ª´ GitHub Secrets
const NOTION_TOKEN = process.env.NOTION_TOKEN;
const DATABASE_ID = process.env.DATABASE_ID;

const notion = new Client({ auth: NOTION_TOKEN });

// üß© Danh s√°ch th√†nh vi√™n c·ªë ƒë·ªãnh
const MEMBER_OPTIONS = ["Khang", "B·ªùm", "B·∫øu", "Huy", "H·∫£i"];

// üìú Ghi log ra console (kh√¥ng c·∫ßn ghi file trong GitHub Actions)
function writeLog(message) {
  const timestamp = new Date().toLocaleString("vi-VN", {
    timeZone: "Asia/Ho_Chi_Minh",
  });
  console.log(`[${timestamp}] ${message}`);
}

// üß† Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn Notion
async function testConnection() {
  writeLog("üîç Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn Notion Database...");

  if (!NOTION_TOKEN || !DATABASE_ID) {
    writeLog("‚ùå Thi·∫øu NOTION_TOKEN ho·∫∑c DATABASE_ID trong bi·∫øn m√¥i tr∆∞·ªùng");
    return false;
  }

  try {
    const db = await notion.databases.retrieve({
      database_id: DATABASE_ID,
    });
    writeLog(`‚úÖ K·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn database: ${db.title[0].plain_text}`);
    return true;
  } catch (err) {
    writeLog("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn database: " + err.message);
    return false;
  }
}

// üîÑ ƒê·∫£m b·∫£o danh s√°ch option ‚ÄúTh√†nh vi√™n‚Äù c√≥ ƒë·∫ßy ƒë·ªß
async function ensureMemberOptions() {
  try {
    const db = await notion.databases.retrieve({
      database_id: DATABASE_ID,
    });

    const currentOptions =
      db.properties["Th√†nh vi√™n"].multi_select.options.map(
        (opt) => opt.name
      );

    const missing = MEMBER_OPTIONS.filter(
      (name) => !currentOptions.includes(name)
    );

    if (missing.length > 0) {
      writeLog("‚ûï Th√™m c√°c th√†nh vi√™n c√≤n thi·∫øu: " + missing.join(", "));
      await notion.databases.update({
        database_id: DATABASE_ID,
        properties: {
          "Th√†nh vi√™n": {
            multi_select: {
              options: [
                ...db.properties["Th√†nh vi√™n"].multi_select.options,
                ...missing.map((name) => ({ name })),
              ],
            },
          },
        },
      });
    } else {
      writeLog("‚úÖ Danh s√°ch th√†nh vi√™n ƒë√£ ƒë·∫ßy ƒë·ªß.");
    }
  } catch (err) {
    writeLog("‚ùå L·ªói khi ki·ªÉm tra danh s√°ch th√†nh vi√™n: " + err.message);
  }
}

// üßπ Reset d·ªØ li·ªáu c·ªôt ‚ÄúTh√†nh vi√™n‚Äù
async function resetData() {
  writeLog("üïì B·∫Øt ƒë·∫ßu reset d·ªØ li·ªáu...");

  try {
    await ensureMemberOptions();

    const pages = await notion.databases.query({
      database_id: DATABASE_ID,
    });

    for (const page of pages.results) {
      await notion.pages.update({
        page_id: page.id,
        properties: {
          "Th√†nh vi√™n": { multi_select: [] },
        },
      });
      writeLog(`‚úÖ ƒê√£ xo√° 'Th√†nh vi√™n' trong page: ${page.id}`);
    }

    writeLog("üéâ Ho√†n t·∫•t reset c·ªôt 'Th√†nh vi√™n'!");
  } catch (err) {
    writeLog("‚ùå L·ªói khi reset: " + err.message);
  }
}
async function notifyUsers(pageId) {
  const children = MEMBER_USERS.map(({name, id}) => ({
    type: "paragraph",
    paragraph: {
      text: [
        {
          type: "mention",
          mention: {
            type: "user",
            user: {
              id: id,
            },
          },
          plain_text: `@${name}`,
        },
        {
          type: "text",
          text: {
            content: " ƒê√£ ch·∫°y reset th√†nh c√¥ng!",
          },
        },
      ],
    },
  }));

  await notion.blocks.children.append({
    block_id: pageId,
    children,
  });

  writeLog("‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ th√†nh vi√™n.");
}
// üöÄ Ch·∫°y ch∆∞∆°ng tr√¨nh ch√≠nh ngay khi workflow ch·∫°y
(async () => {
  const connected = await testConnection();
  if (!connected) {
    writeLog("‚ö†Ô∏è D·ª´ng ch∆∞∆°ng tr√¨nh v√¨ kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c v·ªõi Notion.");
    process.exit(1);
  }

  await resetData();
  await notifyUsers(notificationPageId);
})(); 
